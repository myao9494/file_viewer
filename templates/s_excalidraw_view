{% extends "base.html" %}

{% block head %}
<script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
<script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
<script src="https://unpkg.com/@excalidraw/excalidraw@0.15.2/dist/excalidraw.production.min.js"></script>

<style>
    .excalidraw-container {
        width: 100%;
        height: 100vh;
        padding-top: 40px;
    }

    #excalidraw-wrapper {
        width: 100%;
        height: 100%;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .save-button {
        position: fixed;
        top: 60px;
        right: 20px;
        padding: 8px 16px;
        background-color: #1a73e8;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        z-index: 1000;
    }

    .save-button:hover {
        background-color: #1557b0;
    }

    #error-message, #debug-info {
        position: fixed;
        top: 100px;
        right: 20px;
        padding: 10px 20px;
        border-radius: 4px;
        z-index: 1000;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }

    #error-message {
        background-color: #f44336;
        color: white;
    }

    #debug-info {
        background-color: #4CAF50;
        color: white;
    }
</style>
{% endblock %}

{% block content %}



<div class="excalidraw-container">
    <button class="save-button" id="saveButton">保存</button>
    <div id="error-message" style="display: none;"></div>
    <div id="debug-info" style="display: none;"></div>
    <div id="excalidraw-wrapper"></div>
</div>

<script>

// Reactの初期化
document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('excalidraw-wrapper');
    const root = ReactDOM.createRoot(container);
    root.render(React.createElement(App));

    // 保存ボタンのイベントリスナー
    const saveButton = document.getElementById('saveButton');
    if (saveButton) {
        saveButton.addEventListener('click', () => {
            const app = document.querySelector('#excalidraw-wrapper')?.__reactContainer?.current;
            if (app && app.saveContent) {
                app.saveContent();
            }
        });
    }
});

const App = () => {
    const excalidrawRef = React.useRef(null);
    const [errorMessage, setErrorMessage] = React.useState('');
    const [debugInfo, setDebugInfo] = React.useState('');

    const saveContent = async () => {
        try {
            if (!excalidrawRef.current) return;
            const elements = excalidrawRef.current.getSceneElements();
            const appState = excalidrawRef.current.getAppState();
            
            // シーンデータを作成
            const sceneData = {
                type: "excalidraw",
                version: 2,
                source: "{{ file_path }}",
                elements: elements.map(element => {
                    if (element.type === 'image') {
                        // 画像要素の場合、fileDataを保持
                        return {
                            ...element,
                            fileData: element.fileData || null,
                            status: 'saved'
                        };
                    }
                    return element;
                }),
                appState: {
                    viewBackgroundColor: '#ffffff',
                    gridSize: null,
                    ...appState
                }
            };

            // 保存処理
            const response = await fetch('/save-excalidraw', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    path: "{{ file_path }}",
                    content: sceneData
                })
            });

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.error || '保存に失敗しました');
            }
            setDebugInfo('保存しました');
            setTimeout(() => setDebugInfo(''), 2000);
        } catch (error) {
            console.error('Save error:', error);
            setErrorMessage(`保存エラー: ${error.message}`);
            setTimeout(() => setErrorMessage(''), 3000);
        }
    };

    React.useEffect(() => {
        const loadContent = async () => {
            try {
                console.log('Loading content...');
                const response = await fetch('/get-excalidraw-content', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ path: "{{ file_path }}" })
                });
                
                const data = await response.json();
                console.log('Received data:', data);
                
                if (!data.success) {
                    throw new Error(data.error || 'Failed to load content');
                }

                const content = JSON.parse(data.content);
                console.log('Parsed content:', content);
                
                if (excalidrawRef.current) {
                    excalidrawRef.current.updateScene({
                        elements: content.elements || [],
                        appState: content.appState || {
                            viewBackgroundColor: '#ffffff',
                            gridSize: null
                        }
                    });
                }
            } catch (error) {
                console.error('Load error:', error);
                setErrorMessage(`読み込みエラー: ${error.message}`);
            }
        };

        loadContent();

        // キーボードショートカッのイベントリスナー
        const handleKeyDown = async (e) => {
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
                e.stopPropagation();
                await saveContent();
                return false;
            }
        };

        window.addEventListener('keydown', handleKeyDown, { capture: true });

        return () => {
            window.removeEventListener('keydown', handleKeyDown, { capture: true });
        };
    }, []);

    return React.createElement(
        'div',
        null,
        errorMessage && React.createElement('div', { 
            style: { display: 'block', color: 'red' },
            id: 'error-message'
        }, errorMessage),
        debugInfo && React.createElement('div', { 
            style: { display: 'block', color: 'blue' },
            id: 'debug-info'
        }, debugInfo),
        React.createElement(window.ExcalidrawLib.Excalidraw, {
            ref: excalidrawRef,
            initialData: {
                elements: [],
                appState: { 
                    viewBackgroundColor: '#ffffff',
                    theme: 'light',
                    currentItemFontFamily: 1,
                    gridSize: null
                }
            },
            onChange: (elements, state) => {
                // 変更があった時にデバッグ情報を表示
                console.log('Scene updated:', elements.filter(e => e.type === 'image'));
            }
        })
    );
};
</script>

{% endblock %}
